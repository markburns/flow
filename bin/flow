#!/usr/bin/env ruby
# frozen_string_literal: true

require 'commander/import'
require 'terminal-table'
require 'active_support/all'

program :name, 'Flow'
program :version, '0.0.1'
program :description, 'Improve developer flow'

# command :next do |c|
#   c.syntax = 'flow next'
#   c.description = 'Choose your next JIRA ticket and create a correspondingly named github branch'
#   response=`flow-jira-next | flow-jira-cleanup-response | jq -s '.'`
#   tickets = JSON.parse(response).map{|h| h.except('description', 'created', 'image', 'who')}
#   table = Terminal::Table.new :headings => tickets.first.keys, :rows => tickets.map(&:values)
#   puts table
#   exit
#   c.action do |args, options|
#     tickets.each do |t|
#       table = Terminal::Table.new :rows => rows
#       say "#{t.id} #{t.title}"
#     end
#   end
#
#   exit
# end
#
# command :standup do |c|
#   c.syntax = 'flow standup'
#   c.description = 'Run the standup'
#   c.action do |args, options|
#     `flow-standup`
#   end
# end
#
#
def flow_status
  puts "Fetching status of #{ENV['JIRA_USERNAME']}'s JIRA tickets and PRs"
  puts `flow-status`
end

def flow_assign
  `flow-jira-assign`
end

def flow_ci
  `flow-ci`
end

def flow_standup
  result = `flow-standup`
  sections = result.split('----------------------------------------------------------------------------------------------------')
  sections.reject!(&:blank?)
  index = 0
  puts `clear`
  puts sections[index]

  while index < sections.length
    choice = choose('next step', 'next', 'previous', 'quit')
    case choice
    when 'previous'
      index -= 1
      puts `clear`
      puts sections[index.to_i]
    when 'quit'
      exit
    else
      index += 1
      puts `clear`
      puts sections[index.to_i]
    end
  end
end

prompt = 'What do you want to do?'

choice = choose('Status', 'Standup', 'Assign ticket', 'Check CI', 'Exit')
case choice
when 'Status'
  flow_status
when 'Standup'
  flow_standup
when 'Exit'
  exit
end
