#!/usr/bin/env zsh

branch=${1:-$(current-branch)}
response=$(last-build $branch)
BUILD_NUM=$(printf "%s" $response | jq '.build_num')
SECOND_ARGUMENT=${2:-""}
BUILD_ASSET_PATH=./tmp/build-assets/$BUILD_NUM

FORMAT_TESTS_OUTPUT_RUBY='s = gets; while s do; output = eval s rescue output; puts  "------------------------------------------------------------------\n#{output}"; s = gets; end'

RESULTS=$(
  xq '.' $BUILD_ASSET_PATH/*.xml | \
  jq '.testsuite.testcase[] | select(.failure) | .failure."#text"' | \
  ruby -e $FORMAT_TESTS_OUTPUT_RUBY
)

FAILURES=$(
  echo $RESULTS  | \
   grep "^\-\+" -C1 | \
   grep -v "^\-\+" | \
   grep -v "^Failure\/Error" | \
   grep -o "\.[\.a-z_\/]\+:[0-9]\+" | \
   sed -e "s/\&apos;/'/" | \
   recode html..unicode | \
   sort
)

if [[ "$SECOND_ARGUMENT" == "failures" ]]; then
  printf %s $FAILURES
else
  if [[ "$SECOND_ARGUMENT" == "rerun" ]]; then
     echo $FAILURES | cut -f1 -d: | sort | uniq | xargs --null spring parallel_rspec

    exit
  else
    printf %s $RESULTS
  fi
fi

function display_summary(){
  cat $BUILD_ASSET_PATH/*.xml | \
    less | \
    grep testcase | \
    grep "<failure message" | \
    grep -o "<failure message\=\"[^\"]\+" |   \
    sed 's/\:0x[0-9a-f]\{16\}//' | \
    grep -o '".*' | \
    sort | \
    uniq -c | \
    sort -n -r | \
    sed -e "s/\s\+\([0-9]\+\)\s\"/\\${RED}\1 times: /" | \
    sed -e "s/\&apos;/'/" | \
    recode html..unicode
}
